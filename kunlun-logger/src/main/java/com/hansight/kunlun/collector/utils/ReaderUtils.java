package com.hansight.kunlun.collector.utils;import org.apache.hadoop.fs.Seekable;import org.mozilla.universalchardet.UniversalDetector;import java.io.*;import java.util.Arrays;public final class ReaderUtils {    private ReaderUtils() {    }    /**     * reader charset detect,some known problem is that:     * because detect is base guess, when give information is much less, result is  none,then we thinks win is GBK, other is utf-8     *     * @param reader     * @return     * @throws Exception     */    public static String lineSeparator(BufferedReader reader) throws IOException {        if (reader.markSupported()) {            reader.mark(1024 * 1024*10);        }        String line = reader.readLine();        if (line == null) {            reset(reader);            return "";        }        reset(reader);        char[] chars = new char[line.length()];        reader.read(chars);        chars= new char[3];        reader.read(chars);        reset(reader);        reader.readLine();        line = reader.readLine();        reset(reader);        if (line == null) {            return "";        }        char start = line.charAt(0);        int i = 0;        for (; i < 3; i++) {            if (start == chars[i]) {                break;            }        }          return new String(Arrays.copyOf(chars,i));    }    private static void reset(BufferedReader reader) throws IOException {        if (reader.markSupported()) {            reader.reset();        }        if (reader instanceof Seekable) {            ((Seekable) reader).seek(0);        }    }    private final static UniversalDetector detector = new UniversalDetector(null);    /**     * reader charset detect,some known problem is that:     * because detect is base guess, when give information is much less, result is  none,then we thinks win is GBK, other is utf-8     *     * @param reader     * @return     * @throws Exception     */    public static String charset(InputStream reader) throws IOException {        String encoding = null;        byte[] buf = new byte[4096];        if (reader.markSupported()) {            reader.mark(1024 * 8);        }        int len = reader.read(buf);        if (len > 0) {            detector.handleData(buf, 0, len);            detector.dataEnd();            encoding = detector.getDetectedCharset();        }        if (encoding == null) {            String os = System.getProperty("os.name");            if (os.toLowerCase().contains("windows"))                encoding = "GB18030";            else {                encoding = "UTF-8";            }        }        if (reader.markSupported()) {            reader.reset();        }        if (reader instanceof Seekable) {            ((Seekable) reader).seek(0);        }        return encoding;    }    /**     * simple reader charset detect,some known problem is UTF-8 no BOM cannot be detect ,will return GBK     *     * @param reader     * @return     * @throws java.io.IOException     */    public static String simpleCharset(InputStream reader) throws IOException {        int high = reader.read();        int low = reader.read();        int p = (high << 8) + low;        String code;        //其中的 0xefbb、0xfffe、0xfeff、0x5c75这些都是这个文件的前面两个字节的16进制数        if (p == 0xefbb) {            code = "UTF-8";        } else if (p == 0xfffe) {            code = "UTF-16LE";        } else if (p == 0xfeff) {            code = "UTF-16BE";        } else if (p == 0x5c75) {            code = "ASCII";        } else {            code = "GBK";        }        return code;    }}